const Telegraf = require('telegraf')
const Telegram = require('telegraf/telegram')
const config = require('./config.json')
const { generatePairs, sendJitsiRoom, checkChatAdmin, resetPairs } = require('./helper.js')

const bot = new Telegraf(config.bot_token)
const telegram = new Telegram(config.bot_token)
const REGISTRATION_DURATION = 60 * 1000 // 2 * 60 * 1000

const testMenu = Telegraf.Extra.markdown().markup((m) =>
    m.inlineKeyboard([m.callbackButton('Register ‚≠ê', 'register')])
)

// Process Variables
let reg_status = false
let extend_reg = false
let markdownObj = {}
let participants = []

bot.command('start', async (ctx) => {
    ctx.reply(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø - –±–æ—Ç –¥–ª—è Speed Dating'—É.\n–¢–∏ –∞–∫—Ç–∏–≤—É–≤–∞–≤(-–ª–∞) –º–µ–Ω–µ, —Ç–æ–∂ —Ç–µ–ø–µ—Ä –º–æ–∂–µ—à –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–∞—É–Ω–¥–∞—Ö"
    ).catch(console.log)
})

bot.action('register', async (ctx) => {
    if (!reg_status) {
        return
    }

    if (participants.includes(ctx.from.id)) {
        telegram.sendMessage(ctx.from.id, '–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π(-–∞) –Ω–∞ —Ü–µ–π —Ä–∞—É–Ω–¥ speed-dating!').catch(console.log)
        return
    }

    try {
        await telegram.sendMessage(ctx.from.id, '–¢–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è(-–ª–∞—Å—å) –Ω–∞ —Ä–∞—É–Ω–¥ speed-dating!')
        participants.push(ctx.from.id)
    } catch (e) {
        //TODO: To be improved
        const name = ctx.update.callback_query.from.username
            ? `@${ctx.update.callback_query.from.username}`
            : ctx.update.callback_query.from.first_name
            ? `@${ctx.update.callback_query.from.first_name}`
            : ''
        ctx.reply(`${name}: –ê–∫—Ç–∏–≤—É–π –º–µ–Ω–µ —á–µ—Ä–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑! –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—å!`).catch(
            console.log
        )
        return
    }

    if (extend_reg) {
        try {
            if (participants.length % 2 !== 0) {
                return
            }

            extend_reg = false
            await ctx.editMessageText(`–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ ${participants.length} —É—á–∞—Å–Ω–∏–∫—ñ–≤ \n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ üòÑ`)
            await ctx.reply(`–ì–µ–Ω–µ—Ä—É—é –ø–∞—Ä–∏!`).catch(console.log)

            const pairs = generatePairs(participants)
            await Promise.all(pairs.map((pair) => sendJitsiRoom(...pair)))

            await ctx.reply(`–°—Ç–∞—Ä—Ç—É—î–º–æ!`).catch(console.log)
        } catch (e) {
            if (e.message === 'not-unique') {
                ctx.reply(`–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø–∞—Ä–∏ =(`).catch(console.log)
            }
            console.log(e)
        }
    } else {
        ctx.editMessageText('–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: ' + participants.length, testMenu).catch(console.log)
    }
})

bot.command('speed_dating', async (ctx) => {
    try {
        const isAdmin = await checkChatAdmin(ctx.from.id, ctx.chat.id)
        if (isAdmin) {
            await ctx.reply("–†–æ–∑–ø–æ—á–Ω–µ–º–æ —Ä–∞—É–Ω–¥ speed-dating'—É? \n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç—Ä–∏–≤–∞—Ç–∏–º–µ 2 —Ö–≤–∏–ª–∏–Ω–∏ (120 —Å–µ–∫)")
            await ctx.reply("–û–±–æ–≤'—è–∑–∫–æ–≤–æ –∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω–µ –≤ –ü–ü –ø–µ—Ä–µ–¥ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é!")
            markdownObj = await ctx.replyWithMarkdown('–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ 0 —É—á–∞—Å–Ω–∏–∫—ñ–≤', testMenu)

            reg_status = true
            setTimeout(() => {
                endRegistrationHandler(ctx)
            }, REGISTRATION_DURATION)
        } else {
            ctx.reply('–£–ø—Å... –õ–∏—à–µ –∞–¥–º—ñ–Ω –≥—Ä—É–ø–∏ –º–æ–∂–µ —Å—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏ —Ä–∞—É–Ω–¥!').catch(console.log)
        }
    } catch (e) {
        console.log(e)
    }
})

bot.command('stop_dating', async (ctx) => {
    try {
        if (!reg_status) {
            return
        }
        const isAdmin = await checkChatAdmin(ctx.from.id, ctx.chat.id)
        if (isAdmin) {
            reg_status = false
            participants = []
            await ctx.reply('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ')
            await telegram.editMessageText(markdownObj.chat.id, markdownObj.message_id, null, '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞ :(')
        } else {
            await ctx.reply('–£–ø—Å... –õ–∏—à–µ –∞–¥–º—ñ–Ω –≥—Ä—É–ø–∏ –º–æ–∂–µ –∑—É–ø–∏–Ω—è—Ç–∏ —Ä–∞—É–Ω–¥!')
        }
    } catch (e) {
        console.log(e)
    }
})

bot.command('reset_old_pairs', async (ctx) => {
    try {
        const isAdmin = await checkChatAdmin(ctx.from.id, ctx.chat.id)
        if (isAdmin) {
            resetPairs()
            await ctx.reply('–Ü—Å—Ç–æ—Ä—ñ—è –ø–∞—Ä –æ—á–∏—â–µ–Ω–∞!')
        } else {
            await ctx.reply('–£–ø—Å... –õ–∏—à–µ –∞–¥–º—ñ–Ω –≥—Ä—É–ø–∏ –º–æ–∂–µ —Ü–µ —Ä–æ–±–∏—Ç–∏!')
        }
    } catch (e) {
        console.log(e)
    }
})

async function endRegistrationHandler(ctx) {
    if (!reg_status) {
        return
    }

    try {
        if (participants.length < 2) {
            ctx.reply('–†–∞—É–Ω–¥ –Ω–µ —Ä–æ–∑–ø–æ—á–∞—Ç–æ - –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ :(')
            telegram.editMessageText(markdownObj.chat.id, markdownObj.message_id, null, '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞ :(')

            reg_status = false
            participants = []
            return
        }

        if (participants.length % 2 !== 0) {
            ctx.reply('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è... –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–ª–æ—Ç!')
            extend_reg = true
            return
        }

        reg_status = false
        await telegram.editMessageText(
            markdownObj.chat.id,
            markdownObj.message_id,
            null,
            `–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ ${participants.length} —É—á–∞—Å–Ω–∏–∫—ñ–≤ \n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ üòÑ`
        )
        await ctx.reply(`–ì–µ–Ω–µ—Ä—É—é –ø–∞—Ä–∏!`)

        const pairs = generatePairs(participants)
        await Promise.all(pairs.map((pair) => sendJitsiRoom(...pair)))
        participants = []

        await ctx.reply(`–°—Ç–∞—Ä—Ç—É—î–º–æ!`)
    } catch (e) {
        if (e.message === 'not-unique') {
            ctx.reply(`–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø–∞—Ä–∏ =(`).catch(console.log)
        }
        // old pairs bug!!!!
        console.log(e)
    }
}

// Launch
bot.startPolling()
