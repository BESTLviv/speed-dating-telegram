const Telegraf = require('telegraf')
const Telegram = require('telegraf/telegram')
const config = require('./config.json')
const {
    generatePairs,
    sendJitsiRoom,
    checkChatAdmin,
    resetPairs,
    interruptRegistration,
    getTimers,
} = require('./helper.js')

const bot = new Telegraf(config.bot_token)
const telegram = new Telegram(config.bot_token)
const REGISTRATION_DURATION = config.registration_duration

const registerButtonMenu = Telegraf.Extra.markdown().markup((m) =>
    m.inlineKeyboard([m.callbackButton('Register ‚≠ê', 'register')])
)

// Process Variables
let reg_status = false
let extend_reg = false
let markdownObj = {}
let participants = []
let registrationIntervalId
let registrationTimeoutId

bot.command('start', async (ctx) => {
    if (ctx.chat.type !== 'private') {
        ctx.reply('–ù–∞–ø–∏—à–∏ /start –º–µ–Ω—ñ –≤ –ü–ü, —â–æ–± –º–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–∞—É–Ω–¥–∞—Ö').catch(console.log)
    } else {
        ctx.reply(
            "–ü—Ä–∏–≤—ñ—Ç! –Ø - –±–æ—Ç –¥–ª—è Speed Dating'—É.\n–¢–∏ –∞–∫—Ç–∏–≤—É–≤–∞–≤(-–ª–∞) –º–µ–Ω–µ, —Ç–æ–∂ —Ç–µ–ø–µ—Ä –º–æ–∂–µ—à –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–∞—É–Ω–¥–∞—Ö"
        ).catch(console.log)
    }
})

bot.action('register', async (ctx) => {
    if (!reg_status) {
        return
    }

    if (participants.includes(ctx.from.id)) {
        telegram.sendMessage(ctx.from.id, '–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π(-–∞) –Ω–∞ —Ü–µ–π —Ä–∞—É–Ω–¥ speed-dating!').catch(console.log)
        return
    }

    try {
        await telegram.sendMessage(ctx.from.id, '–¢–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è(-–ª–∞—Å—å) –Ω–∞ —Ä–∞—É–Ω–¥ speed-dating!')
        participants.push(ctx.from.id)
    } catch (e) {
        //TODO: To be improved
        const name = ctx.update.callback_query.from.username
            ? `@${ctx.update.callback_query.from.username}`
            : ctx.update.callback_query.from.first_name
            ? `@${ctx.update.callback_query.from.first_name}`
            : ''
        ctx.reply(`${name}: –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –≤ –ü–ü –∫–æ–º–∞–Ω–¥—É '/start' —ñ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑! –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—å!`).catch(
            console.log
        )
        return
    }

    if (extend_reg) {
        try {
            if (participants.length % 2 !== 0) {
                return
            }

            extend_reg = false
            await ctx.editMessageText(`–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ ${participants.length} —É—á–∞—Å–Ω–∏–∫—ñ–≤ \n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ üòÑ`)
            await ctx.reply(`–ì–µ–Ω–µ—Ä—É—é –ø–∞—Ä–∏!`).catch(console.log)

            const pairs = generatePairs(participants)
            await Promise.all(pairs.map((pair) => sendJitsiRoom(...pair)))

            await ctx.reply(`–°—Ç–∞—Ä—Ç—É—î–º–æ!`).catch(console.log)
        } catch (e) {
            if (e.message === 'not-unique') {
                ctx.reply(`–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø–∞—Ä–∏ =(`).catch(console.log)
            }
            console.log(e)
        }
    } else {
        ctx.editMessageText('–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: ' + participants.length, registerButtonMenu).catch(console.log)
    }
})

bot.command('speed_dating', async (ctx) => {
    try {
        const isAdmin = await checkChatAdmin(ctx.from.id, ctx.chat.id)
        if (isAdmin) {
            if (reg_status) {
                await ctx.reply('–ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥ –ø–æ–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
                return
            }

            if (getTimers().length) {
                await ctx.reply(
                    '–ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥ –ø–æ–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è \n–©–æ–± –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–∞—É–Ω–¥, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /interrupt_round'
                )
                return
            }
            const replyObject = await ctx.reply(
                `–†–æ–∑–ø–æ—á–Ω–µ–º–æ —Ä–∞—É–Ω–¥ speed-dating'—É? \n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ ${REGISTRATION_DURATION / 1000} —Å–µ–∫`
            )
            await ctx.reply("–û–±–æ–≤'—è–∑–∫–æ–≤–æ –∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω–µ –≤ –ü–ü –ø–µ—Ä–µ–¥ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é!")
            markdownObj = await ctx.replyWithMarkdown('–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ 0 —É—á–∞—Å–Ω–∏–∫—ñ–≤', registerButtonMenu)

            const date = Date.now()
            registrationIntervalId = setInterval(async function () {
                if (Math.round((REGISTRATION_DURATION - (Date.now() - date)) / 1000) <= 0) {
                    await telegram.editMessageText(
                        replyObject.chat.id,
                        replyObject.message_id,
                        null,
                        `–†–æ–∑–ø–æ—á–Ω–µ–º–æ —Ä–∞—É–Ω–¥ speed-dating'—É?`
                    )
                    clearInterval(registrationIntervalId)
                    return
                }
                await telegram.editMessageText(
                    replyObject.chat.id,
                    replyObject.message_id,
                    null,
                    `–†–æ–∑–ø–æ—á–Ω–µ–º–æ —Ä–∞—É–Ω–¥ speed-dating'—É? \n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ ${Math.round(
                        (REGISTRATION_DURATION - (Date.now() - date)) / 1000
                    )} —Å–µ–∫`
                )
            }, 5000)

            reg_status = true
            registrationTimeoutId = setTimeout(() => {
                endRegistrationHandler(ctx)
                registrationTimeoutId = null
            }, REGISTRATION_DURATION)
        } else {
            ctx.reply('–£–ø—Å... –õ–∏—à–µ –∞–¥–º—ñ–Ω –≥—Ä—É–ø–∏ –º–æ–∂–µ —Å—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏ —Ä–∞—É–Ω–¥!').catch(console.log)
        }
    } catch (e) {
        console.log(e)
    }
})

bot.command('stop_dating', async (ctx) => {
    try {
        const isAdmin = await checkChatAdmin(ctx.from.id, ctx.chat.id)
        if (isAdmin) {
            if (!reg_status) {
                await ctx.reply('–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, —è–∫–∞ –Ω–µ –ø–æ—á–∞–ª–∞—Å—å')
                return
            }
            reg_status = false
            extend_reg = false
            participants = []
            clearInterval(registrationIntervalId)
            clearTimeout(registrationTimeoutId)
            await ctx.reply('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ')
            await telegram.editMessageText(markdownObj.chat.id, markdownObj.message_id, null, '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞ :(')
        } else {
            await ctx.reply('–£–ø—Å... –õ–∏—à–µ –∞–¥–º—ñ–Ω –≥—Ä—É–ø–∏ –º–æ–∂–µ –∑—É–ø–∏–Ω—è—Ç–∏ —Ä–∞—É–Ω–¥!')
        }
    } catch (e) {
        console.log(e)
    }
})

bot.command('interrupt_round', async (ctx) => {
    try {
        const isAdmin = await checkChatAdmin(ctx.from.id, ctx.chat.id)
        if (isAdmin) {
            if (!getTimers().length) {
                await ctx.reply('–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ —Ä–∞—É–Ω–¥ —è–∫–∏–π –Ω–µ –ø–æ—á–∞–≤—Å—è')
                return
            }
            interruptRegistration(ctx)
        } else {
            await ctx.reply('–£–ø—Å... –õ–∏—à–µ –∞–¥–º—ñ–Ω –≥—Ä—É–ø–∏ –º–æ–∂–µ –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ —Ä–∞—É–Ω–¥!')
        }
    } catch (e) {
        console.log(e)
    }
})

bot.command('reset_old_pairs', async (ctx) => {
    try {
        const isAdmin = await checkChatAdmin(ctx.from.id, ctx.chat.id)
        if (isAdmin) {
            resetPairs()
            await ctx.reply('–Ü—Å—Ç–æ—Ä—ñ—è –ø–∞—Ä –æ—á–∏—â–µ–Ω–∞!')
        } else {
            await ctx.reply('–£–ø—Å... –õ–∏—à–µ –∞–¥–º—ñ–Ω –≥—Ä—É–ø–∏ –º–æ–∂–µ —Ü–µ —Ä–æ–±–∏—Ç–∏!')
        }
    } catch (e) {
        console.log(e)
    }
})

bot.command('help', async (ctx) => {
    try {
        const isAdmin = await checkChatAdmin(ctx.from.id, ctx.chat.id)
        if (isAdmin) {
            await ctx.reply(`–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–ª—è –∞–¥–º—ñ–Ω–∞:
ü§ñ/speed_dating - —Å—Ç–∞—Ä—Ç—É—î —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥ —Å–ø—ñ–¥-–¥–µ–π—Ç—ñ–Ω–≥–∞
ü§ñ/stop_dating - –≤—ñ–¥–º—ñ–Ω—è—î —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
ü§ñ/interrupt_round - –ø–µ—Ä–µ—Ä–∏–≤–∞—î —Ä–∞—É–Ω–¥ —Å–ø—ñ–¥–¥–µ–π—Ç–∏–Ω–≥–∞(–≤—Å—ñ —Ö—Ç–æ –±—Ä–∞–≤ —É—á–∞—Å—Ç—å –≤ —Ü—å–æ–º—É —Ä–∞—É–Ω–¥—ñ –æ—Ç—Ä–∏–º–∞—é—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ, —â–æ —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ)
ü§ñ/reset_old_pairs - –≤–∏–¥–∞–ª—è—î —ñ—Å—Ç–æ—Ä—ñ—é –ø–∞—Ä —è–∫—ñ –±—É–ª–∏ –∫–æ–ª–∏—Å—å –∑—Ñ–æ—Ä–º–æ–≤–∞–Ω—ñ (–Ω–µ –≤–∏–∫–ª–∏–∫–∞–π—Ç–µ, —è–∫—â–æ –Ω–µ —Ö–æ—á–µ—Ç–µ, —â–æ–± –ø–∞—Ä–∏ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å)
            `)
        } else {
            await ctx.reply(
                '–£–ø—Å... –õ–∏—à–µ –∞–¥–º—ñ–Ω –≥—Ä—É–ø–∏ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏! \n–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –≤ –ü–ü –∫–æ–º–∞–Ω–¥—É /start, —è–∫—â–æ —â–µ –Ω–µ –∑—Ä–æ–±–∏–≤ —Ü—å–æ–≥–æ'
            )
        }
    } catch (e) {
        console.log(e)
    }
})

async function endRegistrationHandler(ctx) {
    if (!reg_status) {
        return
    }

    try {
        if (participants.length < 2) {
            ctx.reply('–†–∞—É–Ω–¥ –Ω–µ —Ä–æ–∑–ø–æ—á–∞—Ç–æ - –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ :(')
            telegram.editMessageText(markdownObj.chat.id, markdownObj.message_id, null, '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞ :(')

            reg_status = false
            participants = []
            return
        }

        if (participants.length % 2 !== 0) {
            ctx.reply('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è... –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–ª–æ—Ç!')
            extend_reg = true
            return
        }

        reg_status = false
        await telegram.editMessageText(
            markdownObj.chat.id,
            markdownObj.message_id,
            null,
            `–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ ${participants.length} —É—á–∞—Å–Ω–∏–∫—ñ–≤ \n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ üòÑ`
        )
        await ctx.reply(`–ì–µ–Ω–µ—Ä—É—é –ø–∞—Ä–∏!`)

        const pairs = generatePairs(participants)
        await Promise.all(pairs.map((pair) => sendJitsiRoom(...pair)))
        participants = []

        await ctx.reply(`–°—Ç–∞—Ä—Ç—É—î–º–æ!`)
    } catch (e) {
        if (e.message === 'not-unique') {
            extend_reg = false
            reg_status = false
            ctx.reply(`–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø–∞—Ä–∏ =(`).catch(console.log)
        }
        // old pairs bug!!!!
        console.log(e)
    }
}

// Launch
bot.startPolling()
